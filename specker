#!/usr/bin/python
# -*- coding: utf-8 -*-
# ####################################################################
# specker - a simple spec file tool
# Copyright (C) 2015  Fridolin Pokorny, fpokorny@redhat.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# ####################################################################
import optparse
import sys
import logging
from lib.SpecParser import SpecParser

logger = logging.getLogger('specker')
logger.addHandler(logging.StreamHandler(sys.stderr))

def check_opts(options):
	# TODO: implement checking of disjoint options
	return True

if __name__ == "__main__":
	input_file = None

	parser = optparse.OptionParser("%prog OPTIONS [SPECFILE]")

	parser.add_option_group(optparse.OptionGroup(
												parser,
												"SPECFILE",
												"Specfile to be parsed. If not set,"
												"stdin is used."
												)
	)

	parser.add_option(
		"", "-o", "--output", dest="output", action = "store", default = None,
		help = "output file"
	)

	parser.add_option(
		"", "-v", "--verbose", dest="verbose", action = "store_true", default = False,
		help = "verbose output"
	)

	parser.add_option(
		"", "", "--list-changelog", dest="list_changelog", action = "store_true", default = False,
		help = "list changelog items"
	)

	options, args = parser.parse_args()

	if len(args) > 1:
		logger.error("Error: Incorrect number of arguments")
		exit(1)

	if not check_opts(options):
		exit(2)

	input_file = None
	if len(args) == 1:
		input_file = args[0]

	if options.verbose:
		logger.setLevel(logging.DEBUG)

	try:
		if input_file is None:
			parser = SpecParser(sys.stdin)
		else:
			with open(input_file, 'r') as f:
				parser = SpecParser(f)
		if options.verbose:
			parser.setLoggingLevel(logging.DEBUG)
		parser.parse()

		# TODO: implement options
	except Exception as e:
		logger.exception("Error: %s" % str(e))
		sys.exit(3)

	if options.output is not None:
		try:
			logger.debug("writting output to '%s'" % options.output)
			with open(options.output, 'w') as f:
				parser.print_file(f)
		except Exception as e:
			logger.exception("Error: %s" % str(e))
			raise e
			exit(4)
	else:
		parser.print_str()

