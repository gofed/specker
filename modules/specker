#!/usr/bin/python
# -*- coding: utf-8 -*-
# ####################################################################
# specker - a simple spec file tool
# Copyright (C) 2015  Fridolin Pokorny, fpokorny@redhat.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# ####################################################################
import optparse
import sys
import logging
from modules.specParser import SpecParser
from modules.specChanger import SpecChanger
from modules.specRenderer import SpecRenderer
from modules.specDebug import SpecDebug

logger = logging.getLogger('specker')
logger.addHandler(logging.StreamHandler(sys.stderr))

def check_opts(options, input_file):
	opts_show = [ options.changelog_show,
						options.description_show,
						options.build_show,
						options.check_show,
						options.clean_show,
						options.files_show,
						options.install_show,
						options.package_show,
						options.prep_show,
						options.pre_show,
						options.post_show,
						options.preun_show,
						options.postun_show,
						options.pretrans_show,
						options.posttrans_show,
						options.triggerin_show,
						options.triggerprein_show,
						options.triggerun_show,
						options.triggerpostun_show,
						options.verifyscript_show
						]
	sum_show = sum(opts_show)

	# these provide additional argument
	if options.provides_show:
		sum_show += 1
	if options.requires_show:
		sum_show += 1
	if options.buildrequires_show:
		sum_show += 1

	if sum_show > 1:
		logger.error("Error: only one show operation is allowed per run")
		return False

	# there can be plenty *-adds and *-removes, except sections_add

	opts_edit = [ options.description_edit,
					options.build_edit,
					options.check_edit,
					options.files_edit,
					options.install_edit,
					options.prep_edit,
					options.pre_edit,
					options.post_edit,
					options.preun_edit,
					options.postun_edit,
					options.pretrans_edit,
					options.posttrans_edit,
					options.triggerin_edit,
					options.triggerprein_edit,
					options.triggerun_edit,
					options.triggerpostun_edit,
					options.verifyscript_edit
					]

	# there can be stdin read only once, all others have to be specified
	opts_edit_stdin = [x for x in opts_edit if x is not None and x == '-' ]
	if len(opts_edit_stdin) > 1 or (len(opts_edit_stdin) == 1 and options.sections_add) or \
		  ((len(opts_edit_stdin) > 0 or options.sections_add) and not input_file):
		logger.error("Error: multiple stdin reads, only one can be used per run")
		return False

	return True

def parse_multiarg(arg):
	vals = arg.split(',')
	pkgs = {}

	current = '-' # main
	for x in vals:
		if x.find(':') >= 0:
			x = x.split(':')
			current = x[0]

			if len(current) == 0: # e.g. ':a,b,x:aa'
				current = '-'
			if current not in pkgs:
				pkgs[current] = []

			pkgs[current].append(x[1])
		else:
			if current not in pkgs:
				pkgs[current] = []
			pkgs[current].append(x)

	return pkgs

if __name__ == "__main__":
	input_file = None

	parser = optparse.OptionParser("%prog OPTIONS [SPECFILE]")

	parser.add_option_group(optparse.OptionGroup(
		parser,
		"OPTIONS",
		"Only one *-show option is allowed per run and only one read from stdin in *-edit "
		"operations is allowed per run. If no option is specified, SPECFILE is parsed "
		"and reconstructed to its original form."
		)
	)

	parser.add_option_group(optparse.OptionGroup(
		parser,
		"SPECFILE",
		"Specfile to be parsed. If not set, stdin is used."
		)
	)

	parser.add_option_group(optparse.OptionGroup(
		parser,
		"SHOW OPERATIONS",
		"All *-show operation print selected section."
		)
	)

	parser.add_option_group(optparse.OptionGroup(
		parser,
		"ADD OPERATIONS",
		"All *-add operations expect a comma separated list of items to be add to selected section."
		)
	)

	parser.add_option_group(optparse.OptionGroup(
		parser,
		"EDIT OPERATIONS",
		"All *-edit operations expect a string to be used in a section. If '-' is used, the "
		"string is read from stdin"
		)
	)

	parser.add_option_group(optparse.OptionGroup(
		parser,
		"REMOVE OPERATIONS",
		"All *-remove operations expect a comma separated list of items to be deleted from selected section."
		)
	)

	parser.add_option_group(optparse.OptionGroup(
		parser,
		"CUSTOM MANIPULATOR",
		"You can specify custom section manipulator which can be injected at run time in order "
		"to process SPECFILE in more specific way. Please refer to DOC for more info."
		)
	)

	parser.add_option(
		"", "-o", "--output", dest="output", action = "store", default = None,
		help = "output file"
	)

	parser.add_option(
		"", "-v", "--verbose", dest="verbose", action = "store_true", default = False,
		help = "verbose output"
	)

	parser.add_option(
		"", "", "--custom-manipulator", dest="custom_manipulator", action = "store", type = "string",
		help = "custom manipulator source file"
	)

	parser.add_option(
		"", "", "--sections-add", dest="sections_add", action = "store_true", default = False,
		help = "read sections from stdin and add them to the spec file"
	)

	parser.add_option(
		"", "", "--provides-show", dest="provides_show", action = "store", type = "string",
		help = "show provides"
	)

	parser.add_option(
		"", "", "--provides-add", dest="provides_add", action = "store", type = "string",
		help = "add to provides provides"
	)

	parser.add_option(
		"", "", "--provides-remove", dest="provides_remove", action = "store", type = "string",
		help = "remove from provides"
	)

	parser.add_option(
		"", "", "--requires-show", dest="requires_show", action = "store", type = "string",
		help = "show requires"
	)

	parser.add_option(
		"", "", "--requires-add", dest="requires_add", action = "store", type = "string",
		help = "add requires"
	)

	parser.add_option(
		"", "", "--requires-remove", dest="requires_remove", action = "store", type = "string",
		help = "remove requires"
	)

	parser.add_option(
		"", "", "--buildrequires-show", dest="buildrequires_show", action = "store", type = "string",
		help = "show buildrequires"
	)

	parser.add_option(
		"", "", "--buildrequires-add", dest="buildrequires_add", action = "store", type = "string",
		help = "show buildrequires"
	)

	parser.add_option(
		"", "", "--buildrequires-remove", dest="buildrequires_remove", action = "store", type = "string",
		help = "remove buildrequires"
	)

	parser.add_option(
		"", "", "--changelog-show", dest="changelog_show", action = "store_true", default = False,
		help = "list changelog items"
	)

	parser.add_option(
		"", "", "--changelog-add", dest="changelog_add", action = "store", type = "string",
		help = "add changelog entry"
	)

	parser.add_option(
		"", "", "--changelog-remove", dest="changelog_remove", action = "store_true", default = False,
		help = "remove changelog entry"
	)

	parser.add_option(
		"", "", "--description-show", dest="description_show", action = "store_true", default = False,
		help = "show description"
	)

	parser.add_option(
		"", "", "--description-edit", dest="description_edit", action = "store", type = "string",
		help = "edit description"
	)

	parser.add_option(
		"", "", "--build-show", dest="build_show", action = "store_true", default = False,
		help = "show %build section"
	)

	parser.add_option(
		"", "", "--build-edit", dest="build_edit", action = "store", type = "string",
		help = "edit %build section"
	)

	parser.add_option(
		"", "", "--check-show", dest="check_show", action = "store_true", default = False,
		help = "show %check section"
	)

	parser.add_option(
		"", "", "--check-edit", dest="check_edit", action = "store", type = "string",
		help = "edit %check section"
	)

	parser.add_option(
		"", "", "--clean-show", dest="clean_show", action = "store_true", default = False,
		help = "show %clean section"
	)

	parser.add_option(
		"", "", "--clean-edit", dest="clean_edit", action = "store", type = "string",
		help = "edit %clean section"
	)

	parser.add_option(
		"", "", "--files-show", dest="files_show", action = "store_true", default = False,
		help = "show %files section"
	)

	parser.add_option(
		"", "", "--files-edit", dest="files_edit", action = "store", type = "string",
		help = "edit %files section"
	)

	parser.add_option(
		"", "", "--install-show", dest="install_show", action = "store_true", default = False,
		help = "show %install section"
	)

	parser.add_option(
		"", "", "--install-edit", dest="install_edit", action = "store", type = "string",
		help = "edit %install section"
	)

	parser.add_option(
		"", "", "--package-show", dest="package_show", action = "store_true", default = False,
		help = "show packages provided by spec file"
	)

	parser.add_option(
		"", "", "--package-add", dest="package_add", action = "store", type = "string",
		help = "add package to be provided to spec file"
	)

	parser.add_option(
		"", "", "--package-remove", dest="package_remove", action = "store_true", default = False,
		help = "remove package provided by spec file"
	)

	parser.add_option(
		"", "", "--prep-show", dest="prep_show", action = "store_true", default = False,
		help = "show %prep section"
	)

	parser.add_option(
		"", "", "--prep-edit", dest="prep_edit", action = "store", type = "string",
		help = "edit %prep section"
	)

	parser.add_option(
		"", "", "--pre-show", dest="pre_show", action = "store_true", default = False,
		help = "show %pre section"
	)

	parser.add_option(
		"", "", "--pre-edit", dest="pre_edit", action = "store", type = "string",
		help = "edit %pre section"
	)

	parser.add_option(
		"", "", "--post-show", dest="post_show", action = "store_true", default = False,
		help = "show %post section"
	)

	parser.add_option(
		"", "", "--post-edit", dest="post_edit", action = "store", type = "string",
		help = "edit %post section"
	)

	parser.add_option(
		"", "", "--preun-show", dest="preun_show", action = "store_true", default = False,
		help = "show %preun section"
	)

	parser.add_option(
		"", "", "--preun-edit", dest="preun_edit", action = "store", type = "string",
		help = "edit %preun section"
	)

	parser.add_option(
		"", "", "--postun-show", dest="postun_show", action = "store_true", default = False,
		help = "show %postun section"
	)

	parser.add_option(
		"", "", "--postun-edit", dest="postun_edit", action = "store", type = "string",
		help = "edit %postun section"
	)

	parser.add_option(
		"", "", "--pretrans-show", dest="pretrans_show", action = "store_true", default = False,
		help = "show %pretrans section"
	)

	parser.add_option(
		"", "", "--pretrans-edit", dest="pretrans_edit", action = "store", type = "string",
		help = "edit %pretrans section"
	)

	parser.add_option(
		"", "", "--posttrans-show", dest="posttrans_show", action = "store_true", default = False,
		help = "show %posttrans section"
	)

	parser.add_option(
		"", "", "--posttrans-edit", dest="posttrans_edit", action = "store", type = "string",
		help = "edit %posttrans section"
	)

	parser.add_option(
		"", "", "--triggerin-show", dest="triggerin_show", action = "store_true", default = False,
		help = "show %triggerin section"
	)

	parser.add_option(
		"", "", "--triggerin-edit", dest="triggerin_edit", action = "store", type = "string",
		help = "edit %triggerin section"
	)

	parser.add_option(
		"", "", "--triggerprein-show", dest="triggerprein_show", action = "store_true", default = False,
		help = "show %triggerprein section"
	)

	parser.add_option(
		"", "", "--triggerprein-edit", dest="triggerprein_edit", action = "store", type = "string",
		help = "edit %triggerprein section"
	)

	parser.add_option(
		"", "", "--triggerun-show", dest="triggerun_show", action = "store_true", default = False,
		help = "show %triggerun section"
	)

	parser.add_option(
		"", "", "--triggerun-edit", dest="triggerun_edit", action = "store", type = "string",
		help = "edit %triggerun section"
	)

	parser.add_option(
		"", "", "--triggerpostun-show", dest="triggerpostun_show", action = "store_true", default = False,
		help = "show %triggerpostun section"
	)

	parser.add_option(
		"", "", "--triggerpostun-edit", dest="triggerpostun_edit", action = "store", type = "string",
		help = "edit %triggerpostun section"
	)

	parser.add_option(
		"", "", "--verifyscript-show", dest="verifyscript_show", action = "store_true", default = False,
		help = "show %verifyscript section"
	)

	parser.add_option(
		"", "", "--verifyscript-edit", dest="verifyscript_edit", action = "store", type = "string",
		help = "edit %verifyscript section"
	)

	options, args = parser.parse_args()

	if len(args) > 1:
		logger.error("Error: Incorrect number of arguments")
		exit(1)

	if not check_opts(options, len(args) == 1):
		exit(2)

	input_file = None
	if len(args) == 1:
		input_file = args[0]

	if options.verbose:
		logger.setLevel(logging.DEBUG)
		SpecDebug.logger.setLevel(logging.DEBUG)

	parser = SpecParser()

	try:
		if options.custom_manipulator:
			execfile(options.custom_manipulator)
			for manipulator in custom_manipulators:
				parser.register_manipulator(manipulator)

		if input_file is None:
			parser.init(sys.stdin)
		else:
			with open(input_file, 'r') as f:
				parser.init(f)

		parser.parse()

		spec = SpecChanger(parser.getModel())
		del parser

		if options.output is not None:
			logger.debug("writting output to '%s'" % options.output)
			f = open(options.output, 'w')
		else:
			f = sys.stdout

		# modify operations before shows
		if options.provides_add:
			spec.provides_add(parse_multiarg(options.provides_add))
		if options.requires_add:
			spec.requires_add(parse_multiarg(options.requires_add))
		if options.buildrequires_add:
			spec.buildrequires_add(parse_multiarg(options.buildrequires_add))
		if options.changelog_add:
			spec.changelog_add(options.changelog_add.split(':'))
		if options.package_add:
			spec.package_add(options.package_add.split(','))

		if options.provides_remove:
			spec.provides_remove(parse_multiarg(options.provides_remove), f)
		if options.requires_remove:
			spec.requires_remove(parse_multiarg(options.requires_remove), f)
		if options.buildrequires_remove:
			spec.buildrequires_remove(parse_multiarg(options.buildrequires_remove), f)
		if options.changelog_remove:
			spec.changelog_remove(options.changelog_remove.split(','))
		if options.package_remove:
			spec.package_remove(options.package_remove.split(','))

		if options.description_edit:
			what = sys.stdin.read() if options.description_edit == "-" else options.description_edit
			spec.description_edit(what)
		if options.build_edit:
			what = sys.stdin.read() if options.build_edit == "-" else options.build_edit
			spec.build_edit(what)
		if options.check_edit:
			what = sys.stdin.read() if options.check_edit == "-" else options.check_edit
			spec.check_edit(what)
		if options.files_edit:
			what = sys.stdin.read() if options.files_edit == "-" else options.files_edit
			spec.files_edit(what)
		if options.install_edit:
			what = sys.stdin.read() if options.install_edit == "-" else options.install_edit
			spec.install_edit(what)
		if options.prep_edit:
			what = sys.stdin.read() if options.prep_edit == "-" else options.prep_edit
			spec.prep_edit(what)
		if options.pre_edit:
			what = sys.stdin.read() if options.pre_edit == "-" else options.pre_edit
			spec.pre_edit(what)
		if options.post_edit:
			what = sys.stdin.read() if options.post_edit == "-" else options.post_edit
			spec.post_edit(what)
		if options.preun_edit:
			what = sys.stdin.read() if options.preun_edit == "-" else options.preun_edit
			spec.preun_edit(what)
		if options.postun_edit:
			what = sys.stdin.read() if options.postun_edit == "-" else options.postun_edit
			spec.postun_edit(what)
		if options.pretrans_edit:
			what = sys.stdin.read() if options.pretrans_edit == "-" else options.pretrans_edit
			spec.pretrans_edit(what)
		if options.posttrans_edit:
			what = sys.stdin.read() if options.posttrans_edit == "-" else options.posttrans_edit
			spec.posttrans_edit(what)
		if options.triggerin_edit:
			what = sys.stdin.read() if options.triggerin_edit == "-" else options.triggerin_edit
			spec.triggerin_edit(what)
		if options.triggerprein_edit:
			what = sys.stdin.read() if options.triggerprein_edit == "-" else options.triggerprein_edit
			spec.triggerprein_edit(what)
		if options.triggerun_edit:
			what = sys.stdin.read() if options.triggerun_edit == "-" else options.triggerun_edit
			spec.triggerun_edit(what)
		if options.triggerpostun_edit:
			what = sys.stdin.read() if options.triggerpostun_edit == "-" else options.triggerpostun_edit
			spec.triggerpostun_edit(what)
		if options.verifyscript_edit:
			what = sys.stdin.read() if options.verifyscript_edit == "-" else options.verifyscript_edit
			spec.verifyscript_edit(what)

		if options.sections_add:
			spec2 = SpecParser()
			spec2.init(sys.stdin)
			spec.sections_add(spec2.parse_loop_section())

		spec = SpecRenderer(spec.getModel())
		# yo mama, show results!
		if options.provides_show:
			spec.provides_show(options.provides_show.split(':'), f)
		elif options.requires_show:
			spec.requires_show(options.requires_show.split(':'), f)
		elif options.buildrequires_show:
			spec.buildrequires_show(options.buildrequires_show.split(':'), f)
		elif options.changelog_show:
			spec.changelog_show(f)
		elif options.description_show:
			spec.description_show(f)
		elif options.build_show:
			spec.build_show(f)
		elif options.check_show:
			spec.check_show(f)
		elif options.clean_show:
			spec.clean_show(f)
		elif options.files_show:
			spec.files_show(f)
		elif options.install_show:
			spec.install_show(f)
		elif options.package_show:
			spec.package_show(f)
		elif options.prep_show:
			spec.prep_show(f)
		elif options.pre_show:
			spec.pre_show(f)
		elif options.post_show:
			spec.post_show(f)
		elif options.preun_show:
			spec.preun_show(f)
		elif options.postun_show:
			spec.postun_show(f)
		elif options.pretrans_show:
			spec.pretrans_show(f)
		elif options.posttrans_show:
			spec.posttrans_show(f)
		elif options.triggerin_show:
			spec.triggerin_show(f)
		elif options.triggerprein_show:
			spec.triggerprein_show(f)
		elif options.triggerun_show:
			spec.triggerun_show(f)
		elif options.triggerpostun_show:
			spec.triggerpostun_show(f)
		elif options.verifyscript_show:
			spec.verifyscript_show(f)
		else:
			spec.render(f)

		f.close()

	except Exception as e:
		logger.exception("Error: %s" % str(e))
		sys.exit(3)

